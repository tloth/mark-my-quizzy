{"version":3,"sources":["components/Nav.tsx","components/Welcome.tsx","components/CategoryAnswers.tsx","components/Mark.jsx","components/Results.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Navigation","styled","nav","A","Link","Nav","to","Container","div","H1","h1","UL","ul","Welcome","section","Category","h2","AnswerContainer","Answer","p","MarkerButton","button","CategoryAnswers","props","useState","categoryScore","setCategoryScore","toggleButton","e","target","textContent","setTotalScore","totalScore","onClick","Dropdown","TeamsList","Mark","href","Marking","App","answers","useEffect","fetch","then","result","text","console","log","catch","err","RouterPage","path","pageComponent","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.a31e3422.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { Link } from '@reach/router'\n\nfunction Nav() {\n  return (\n    <Navigation>\n      <A to='/'>Home</A>\n      <A to='/mark'>Mark</A>\n      <A to='/results'>Results</A>\n    </Navigation>\n  )\n}\n\nconst Navigation = styled.nav`\n  display: flex;\n  background: #fd865d;\n  color: #fff;\n  text-transform: uppercase;\n  font-size: 3rem;\n`\n\nconst A = styled(Link)`\n  width: 50%;\n  text-align: center;\n  padding: 1.5rem;\n  text-decoration: none;\n  color: #fff;\n  &:hover {\n    background: #fff;\n    color: #fd865d;\n  }\n`\n\nexport default Nav\n","import React from 'react'\nimport styled from 'styled-components'\n\nfunction Welcome() {\n  return (\n    <Container>\n      <p>Hello and welcome to the</p>\n      <H1>Spring Quiz Extravaganza</H1>\n      <h2>How it works</h2>\n      <UL>\n        <li>\n          Put your answers on the provided Airtable form. When you submit it,\n          your team name shall appear in the dropdown menu on the 'Mark' page.\n        </li>\n        <li>\n          When every team has submitted their answers, you will be asked to\n          navigate to the 'Mark' page!\n        </li>\n        <li>Good luck and don't fuck it up!</li>\n      </UL>\n    </Container>\n  )\n}\n\nconst Container = styled.div`\n  text-align: center;\n  width: 50%;\n  margin: 5rem auto 3rem;\n`\n\nconst H1 = styled.h1`\n  font-family: 'Rock Salt', cursive;\n  font-size: 3rem;\n  color: #fff;\n  letter-spacing: 0.2rem;\n`\n\nconst UL = styled.ul`\n  text-transform: none;\n  text-align: left;\n  line-height: 1.4rem;\n  letter-spacing: 0.1rem;\n  > li {\n    margin-bottom: 2rem;\n  }\n`\n\nexport default Welcome\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\n\nfunction CategoryAnswers(props: any) {\n  const [categoryScore, setCategoryScore] = useState<number>(0)\n\n  function toggleButton(e: any) {\n    if (e.target.textContent === 'nope') {\n      e.target.textContent = 'correct!'\n      setCategoryScore(categoryScore + 1)\n      props.setTotalScore(props.totalScore + 1)\n    } else if (e.target.textContent === 'correct!') {\n      e.target.textContent = 'nope'\n      setCategoryScore(categoryScore - 1)\n      props.setTotalScore(props.totalScore - 1)\n    }\n  }\n\n  return (\n    <Container>\n      <Category>Category: will be filled</Category>\n      <AnswerContainer>\n        <Answer>1 these will also come from airtable</Answer>\n        <MarkerButton onClick={toggleButton}>nope</MarkerButton>\n      </AnswerContainer>\n      <AnswerContainer>\n        <Answer>1 these will also come from airtable</Answer>\n        <MarkerButton onClick={toggleButton}>nope</MarkerButton>\n      </AnswerContainer>\n      <AnswerContainer>\n        <Answer>1 these will also come from airtable</Answer>\n        <MarkerButton onClick={toggleButton}>nope</MarkerButton>\n      </AnswerContainer>\n      <AnswerContainer>\n        <Answer>1 these will also come from airtable</Answer>\n        <MarkerButton onClick={toggleButton}>nope</MarkerButton>\n      </AnswerContainer>\n      <AnswerContainer>\n        <Answer>1 these will also come from airtable</Answer>\n        <MarkerButton onClick={toggleButton}>nope</MarkerButton>\n      </AnswerContainer>\n      <p>Category score: {categoryScore}/10</p>\n    </Container>\n  )\n}\n\nconst Container = styled.section`\n  width: 50vw;\n  background: #fff;\n  padding: 1rem;\n  margin: 3rem auto;\n`\n\nconst Category = styled.h2`\n  text-align: center;\n`\n\nconst AnswerContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  border: 0.5px dotted #fd865d;\n  padding: 0 0.5rem;\n  margin-bottom: 0.5rem;\n`\n\nconst Answer = styled.p``\n\nconst MarkerButton = styled.button`\n  border: none;\n  font-family: inherit;\n  font-size: inherit;\n  text-transform: uppercase;\n  padding: 0.5rem;\n  vertical-align: middle;\n`\n\nexport default CategoryAnswers\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\n\nimport CategoryAnswers from './CategoryAnswers'\n\nfunction Mark() {\n  const [totalScore, setTotalScore] = useState(0)\n  return (\n    <>\n      <UL>\n        <li>\n          It's time to mark! Find your team name on the list below and{' '}\n          <em>pick the team right after yours</em> by clicking on it. This is\n          very important in order to make sure every form gets marked! Please\n          don't fuk this up. The last team should pick the first one on the\n          list.\n        </li>\n        <li>\n          We go through every answer together, you toggle the button to mark an\n          answer correct (or incorrect again). Use your best judgement, but be\n          kind & generous (not too generous).\n        </li>\n        <li>\n          When you submit the page you marked, that team's points should appear\n          on the leader board, which you can find by clicking on 'Results'.\n        </li>\n      </UL>\n      <Dropdown>\n        Teams\n        <TeamsList>\n          <li>\n            <a href='#'>shlucky shrimps</a>\n          </li>\n          <li>\n            <a href='#'>blablablaaaaa</a>\n          </li>\n          <li>\n            <a href='#'>shrimps</a>\n          </li>\n        </TeamsList>\n      </Dropdown>\n      <CategoryAnswers totalScore={totalScore} setTotalScore={setTotalScore} />\n      <CategoryAnswers totalScore={totalScore} setTotalScore={setTotalScore} />\n      <h1>current overall totalScore: {totalScore}/60</h1>\n    </>\n  )\n}\n\nconst UL = styled.ul`\n  width: 50%;\n  text-transform: none;\n  text-align: left;\n  line-height: 1.4rem;\n  letter-spacing: 0.1rem;\n  margin: 5rem auto 3rem;\n  > li {\n    margin-bottom: 2rem;\n  }\n`\n\nconst Dropdown = styled.div`\n  position: relative;\n  width: 50%;\n  text-align: center;\n  padding: 1.5rem;\n  margin: 03rem auto;\n  text-decoration: none;\n  background: #fff;\n  color: #fd865d;\n  &:hover {\n    background: #fd865d;\n    color: #fff;\n    ul {\n      display: block;\n    }\n  }\n`\n\nconst TeamsList = styled.ul`\n  display: none;\n  position: absolute;\n  width: 100%;\n  list-style: none;\n  background: #fd865d;\n  left: 0;\n  padding-inline-start: 0;\n  margin-block-start: 0.5em; // is this an absolute mess??\n  > li a {\n    text-decoration: none;\n    color: #24352e;\n    font-size: 2rem;\n    padding: 1rem;\n    &:hover {\n      color: #fff;\n    }\n  }\n`\nexport default Mark\n","import React from 'react'\n\nexport default function Marking() {\n  return <p>On the results page</p>\n}\n","import React, { useEffect, useState } from 'react'\nimport { Router, RouteComponentProps } from '@reach/router'\nimport Nav from './components/Nav'\nimport Welcome from './components/Welcome'\nimport Mark from './components/Mark.jsx'\nimport Results from './components/Results'\n\nfunction App() {\n  const [answers, setAnswers] = useState<any>(null)\n\n  useEffect(() => {\n    fetch('/.netlify/functions/airtableAllAnswers')\n      // .then(result => result.json())\n      // .then(json => setAnswers(json))\n      .then(result => result.text())\n      .then(text => console.log('the text', text))\n      // .then(result => setAnswers(result))\n      .catch(err => console.log('ERROR IN FETCH', err))\n  }, [])\n\n  console.log('ANSWERS', answers)\n\n  return (\n    <>\n      <Nav />\n      <Router>\n        <RouterPage path='/' pageComponent={<Welcome />} />\n        <RouterPage path='/mark' pageComponent={<Mark />} />\n        <RouterPage path='/results' pageComponent={<Results />} />\n      </Router>\n    </>\n  )\n}\n\nexport default App\n\n// To get around TypeScript + Reach Router issue (https://github.com/reach/router/issues/141#issuecomment-451646939)\nconst RouterPage = (\n  props: { pageComponent: JSX.Element } & RouteComponentProps\n) => props.pageComponent\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}